{"version":3,"sources":["constants.ts","assets/index.ts","assets/sprites/player.png","assets/sprites/enemy.png","assets/background.png","assets/sprites/food.png","settings.ts","gameobjects/Player/Player.ts","utils.ts","scene/Menu/settings.ts","scene/Menu/menu.ts","gameobjects/GameObject/GameObject.ts","gameobjects/Player/settings.ts","gameobjects/Effect/Effect.ts","gameobjects/Effect/Hungry.ts","gameobjects/Effect/Saturation.ts","gameobjects/Enemy/Enemy.ts","gameobjects/ScoreBoard/settings.ts","gameobjects/ScoreBoard/ScoreBoard.ts","gameobjects/Enemy/settings.ts","gameobjects/Effect/Damage.ts","gameobjects/Enemy/EnemyGroup.ts","gameobjects/Food/settings.ts","gameobjects/Food/Food.ts","gameobjects/Food/FoodGroup.ts","gameobjects/Effect/Speed.ts","scene/Game/settings.ts","scene/Game/game.ts","scene/End/settings.ts","scene/End/end.ts","scene/Boot/boot.ts","scene/Preload/preload.ts","scene/MobileError/settings.ts","scene/MobileError/mobileError.ts","scene/Win/settings.ts","scene/Win/win.ts","index.ts"],"names":["ANIMATION_KEYS","SCENE_KEYS","ASSETS_MAP","player","enemy","background","food","ASSETS_MAP_KEY","Object","keys","reduce","result","key","PlayerGameState","PlayerEvents","body","document","querySelector","globalSettings","type","Phaser","AUTO","bodyRect","getBoundingClientRect","width","height","physics","default","arcade","debug","process","gravity","y","uiSettings","randomInteger","min","max","rand","Math","random","round","logger","console","info","wait","ms","a","Promise","resolve","setTimeout","createWandingObject","scene","config","wandingObject","add","sprite","startPositionX","startPositionY","image","frame","setScale","setBounceX","setBounceY","setCollideWorldBounds","setVelocity","minSpeed","maxSpeed","createBackground","globalWidth","Number","globalHeight","setOrigin","displayWidth","displayHeight","infinityRotate","object","speed","angle","setAngle","menuSettings","title","fontSize","fontColor","text","description","MenuScene","MENU","backgroundPlayer","this","gameWidth","fontFamily","color","align","setFontSize","input","once","start","GAME","Scene","GameObject","x","effects","init","effect","push","time","now","isEnded","active","existing","filter","end","forEach","update","Physics","Arcade","Sprite","playerSettings","Effect","target","startTime","duration","Hungry","lasEatTime","hungryDelay","hungryDamage","Infinity","Player","updateSetiety","Saturation","damage","saturation","VelocityVector","health","satiety","state","IDLE","hungryEffect","playAnimation","cursors","isDead","checkEffects","updateEffects","shouldMove","left","isDown","right","up","down","directionMove","getDirectionMove","updateVelocity","toggleMoveAnimations","isMoving","checkDieStatus","DIE","emit","scale","ignoreIfPlaying","MOVING","createAnimations","direction","getSpeed","move","stop","MOVE_TOP","MOVE_TOP_RIGHT","MOVE_RIGHT","MOVE_BOTTOM_RIGHT","MOVE_BOTTOM","MOVE_TOP_LEFT","MOVE_LEFT","MOVE_BOTTOM_LEFT","anims","create","frames","generateFrameNumbers","frameRate","repeat","getHealth","getSatiety","die","scoreBoardSettings","timeText","healthText","satietyText","ScoreBoard","board","make","getInfoText","style","setX","setY","setText","getTimeText","toFixed","seconds","floor","hours","substractedSeconds","GameObjects","Layer","enemySettings","enemyGroupSettings","Damage","Enemy","velocityVector","play","TOP_TO_BOTTOM","setVelocityY","RIGHT_TO_LEFT","setVelocityX","BOTTOM_TO_TOP","LEFT_TO_RIGHT","gameHeight","reset","coords","getStartEnemyCoords","getRandomDamage","initMovement","isHorizontalVector","setSpeed","isHorizontal","isLeft","isTop","Vector2","EnemyGroup","world","enemies","classType","i","Group","foodSettings","foodGroupSettings","Food","outer","Geom","Rectangle","Point","getRandomSaturation","getRandomPoint","setTexture","FoodGroup","foods","tweens","targets","props","value","yoyo","Speed","gameSettings","minWinTimeMs","maxWinTimeMs","GameScene","foodGroup","enemyGroup","scoreBoard","winTime","keyboard","createCursorKeys","createPlayer","createFoods","createEnemies","createScoreBoard","overlap","obj1","obj2","saturationEffect","getSaturationEffect","addEffect","damageEffect","getDamageEffect","speedEffect","checkGameTime","on","END","WIN","endSettings","EndScene","BootScene","BOOT","load","script","PRELOAD","PreloadScene","spritesheet","frameWidth","frameHeight","window","WebFont","google","families","MOBILE_ERROR","mobileErrorSettings","MobileError","winSettings","WinScene","createBackgroundPlayerAnimation","Game"],"mappings":"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","file":"static/js/main.2f2864fe.chunk.js","sourcesContent":["export enum ANIMATION_KEYS {\n    IDLE = 'idle',\n    MOVE_TOP_RIGHT = 'move_top_right',\n    MOVE_TOP_LEFT = 'move_top_left',\n    MOVE_BOTTOM_RIGHT = 'move_bottom_right',\n    MOVE_BOTTOM_LEFT = 'move_bottom_left',\n    MOVE_RIGHT = 'move_right',\n    MOVE_LEFT = 'move_left',\n    MOVE_TOP = 'move_top',\n    MOVE_BOTTOM = 'move_bottom',\n    DIE = 'die',\n}\n\nexport enum SCENE_KEYS {\n    BOOT = 'boot',\n    PRELOAD = 'preload',\n    MENU = 'menu',\n    GAME = 'game',\n    END = 'end',\n    MOBILE_ERROR = 'mobile_error',\n    WIN = 'win',\n};\n","import player from './sprites/player.png';\nimport enemy from './sprites/enemy.png';\nimport background from './background.png';\nimport food from './sprites/food.png';\n\n\nexport const ASSETS_MAP = {\n    player,\n    enemy,\n    background,\n    food,\n}\n\ntype ASSETS_KEYS = keyof typeof ASSETS_MAP;\n\nexport const ASSETS_MAP_KEY: Record<ASSETS_KEYS, string> = Object.keys(ASSETS_MAP).reduce((result: Record<ASSETS_KEYS, string>, key: string) => {\n    return { ...result, [key]: key };\n}, {} as Record<ASSETS_KEYS, string>);","export default __webpack_public_path__ + \"static/media/player.d3304558.png\";","export default __webpack_public_path__ + \"static/media/enemy.f53829d7.png\";","export default __webpack_public_path__ + \"static/media/background.b6e43584.png\";","export default __webpack_public_path__ + \"static/media/food.ecee3b62.png\";","import Phaser from 'phaser';\n\nconst body = document.querySelector('body');\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nexport const globalSettings: Phaser.Types.Core.GameConfig = {\n    type: Phaser.AUTO,\n    get width() {\n        const bodyRect = body?.getBoundingClientRect();\n        return bodyRect?.width || 0;\n    },\n    get height() {\n        const bodyRect = body?.getBoundingClientRect();\n        return bodyRect?.height || 0;\n    },\n    physics: {\n        default: 'arcade',\n        arcade: {\n            debug: isDev,\n            gravity: { y: 0 },\n        }\n    },\n};\n\nexport const uiSettings = {\n    font: 'Roboto',\n}\n","import Phaser from \"phaser\";\nimport { ANIMATION_KEYS } from '../../constants';\nimport { GameObject } from \"../GameObject/GameObject\";\nimport { playerSettings } from './settings';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { Hungry } from '../Effect/Hungry';\nimport { Effect } from '../Effect/Effect';\nimport { Saturation } from '../Effect/Saturation';\n\n/**\n * move direction:\n * 0000 - idle\n * 1000 - вверх\n * 100 - вправо\n * 10 - вниз\n * 1 - влево\n * 1100 - вверх вправо\n * 110 - вправо вниз\n * 11 - вниз влево\n * 1001 - вверх влево\n */\n\nenum PlayerGameState {\n    IDLE = 'idle',\n    MOVING = 'moving',\n    DIE = 'die'\n}\n\nexport enum PlayerEvents {\n    DIE = 'die',\n}\n\nexport class Player extends GameObject {\n    private health: number = 0;\n    private satiety: number;\n    state: PlayerGameState = PlayerGameState.IDLE;\n\n    constructor (scene: Phaser.Scene) {\n        super(scene, {\n            x: playerSettings.startX,\n            y: playerSettings.startY,\n            speed: playerSettings.startSpeed,\n        });\n\n        this.satiety = playerSettings.startSatiety;\n        this.health = playerSettings.startHealth;\n        const hungryEffect = new Hungry();\n        hungryEffect.start(this, this.scene.time.now);\n        this.effects.push(hungryEffect);\n\n        this.playAnimation(ANIMATION_KEYS.IDLE);\n    }\n\n    update(cursors: Phaser.Types.Input.Keyboard.CursorKeys) {\n        if (this.isDead()) {\n            return;\n        }\n\n        this.checkEffects();\n        this.updateEffects();\n\n        this.setVelocity(0);\n        const shouldMove = (\n            cursors.left.isDown ||\n            cursors.right.isDown ||\n            cursors.up.isDown ||\n            cursors.down.isDown\n        );\n\n        let directionMove = this.getDirectionMove(cursors);\n        this.updateVelocity(directionMove);\n\n        if (shouldMove) {\n            this.toggleMoveAnimations(true, directionMove);\n        } else if (!shouldMove && this.isMoving()) {\n            this.toggleMoveAnimations(false);\n        }\n\n        this.checkDieStatus();\n    }\n\n    getSpeed() {\n        return this.speed;\n    }\n\n    getHealth() {\n        return this.health;\n    }\n\n    getSatiety() {\n        return this.satiety || 0;\n    }\n\n    die() {\n        this.setVelocity(0);\n        this.playAnimation(ANIMATION_KEYS.DIE);\n        this.emit(PlayerEvents.DIE);\n    }\n\n    updateSetiety(saturation: number) {\n        this.setScale(this.scale + saturation / playerSettings.scaleQ);\n        this.satiety += saturation / playerSettings.satietyQ;\n        this.health += saturation;\n    }\n\n    addEffect(effect: Effect) {\n        super.addEffect(effect);\n\n        if (effect instanceof Saturation) {\n            (this.effects[0] as Hungry).lasEatTime = this.scene.time.now;\n        }\n    }\n\n    private playAnimation(key: ANIMATION_KEYS, ignoreIfPlaying?: boolean) {\n        super.play(key as string, ignoreIfPlaying);\n\n        switch(key) {\n            case ANIMATION_KEYS.IDLE:\n                this.state = PlayerGameState.IDLE;\n                break;\n            case ANIMATION_KEYS.DIE:\n                this.state = PlayerGameState.DIE;\n                break;\n            default:\n                this.state = PlayerGameState.MOVING;\n                break;\n        }\n\n        return this;\n    }\n\n    protected init() {\n        super.init();\n\n        this.setCollideWorldBounds(true);\n        this.createAnimations();\n    }\n\n    private isDead() {\n        return this.state === PlayerGameState.DIE;\n    }\n\n    private isMoving() {\n        return this.state !== PlayerGameState.DIE &&\n            this.state !== PlayerGameState.IDLE;\n    }\n\n    private updateVelocity(direction: number) {\n        this.setVelocity(0);\n        const speed = this.getSpeed();\n        switch(direction) {\n            case 1000:\n                this.setVelocity(0, -speed);\n                break;\n            case 1100:\n                this.setVelocity(speed, -speed);\n                break;\n            case 100:\n                this.setVelocity(speed, 0);\n                break;\n            case 110:\n                this.setVelocity(speed, speed);\n                break;\n            case 1001:\n                this.setVelocity(-speed, -speed);\n                break;\n            case 10:\n                this.setVelocity(0, speed);\n                break;\n            case 11:\n                this.setVelocity(-speed, speed);\n                break;\n            case 1:\n                this.setVelocity(-speed, 0);\n                break;\n            default:\n                this.setVelocity(0);\n                break;\n        }\n    }\n\n    // TODO: сделать общим методом в GameObject.ts\n    private getDirectionMove(cursors: Phaser.Types.Input.Keyboard.CursorKeys) {\n        let directionMove = 0;\n\n        if (cursors.left.isDown) {\n            directionMove += 1;\n        } else if (cursors.right.isDown) {\n            directionMove += 100;\n        }\n\n        if (cursors.up.isDown) {\n            directionMove += 1000;\n        } else if (cursors.down.isDown) {\n            directionMove += 10;\n        }\n\n        return directionMove;\n    }\n\n    private toggleMoveAnimations(move: boolean, direction?: number) {\n        this.stop();\n        if (move) {\n            switch(direction) {\n                case 1000:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_TOP);\n                    break;\n                case 1100:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_TOP_RIGHT);\n                    break;\n                case 100:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_RIGHT);\n                    break;\n                case 110:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_BOTTOM_RIGHT);\n                    break;\n                case 10:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_BOTTOM);\n                    break;\n                case 1001:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_TOP_LEFT);\n                    break;\n                case 1:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_LEFT);\n                    break;\n                case 11:\n                    this.playAnimation(ANIMATION_KEYS.MOVE_BOTTOM_LEFT);\n                    break;\n                default: break;\n            }\n        } else {\n            this.playAnimation(ANIMATION_KEYS.IDLE);\n        }\n    }\n\n    protected createAnimations() {\n        this.anims.create({\n            key: ANIMATION_KEYS.IDLE,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 25 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_TOP_LEFT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 0 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_TOP_RIGHT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 34 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_BOTTOM_RIGHT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 36 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_BOTTOM_LEFT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 11 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_BOTTOM,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 9 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_TOP,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 20 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_RIGHT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 58 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.MOVE_LEFT,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [ 26 ] }),\n            frameRate: 1,\n            repeat: -1,\n        });\n\n        this.anims.create({\n            key: ANIMATION_KEYS.DIE,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.player, { frames: [15] }),\n            frameRate: 1,\n            repeat: 0,\n        });\n    }\n\n    private checkDieStatus() {\n        const isEnd = this.getHealth() < playerSettings.minHealth ||\n        this.getSatiety() < playerSettings.minSatiety;\n\n        if (isEnd) {\n            this.die();\n        }\n    }\n}\n","import { ASSETS_MAP_KEY } from './assets';\nimport { globalSettings } from './settings';\n\nexport const randomInteger = (min: number, max: number) => {\n    // получить случайное число от (min-0.5) до (max+0.5)\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\n    return Math.round(rand);\n}\n\nexport const logger = (...args: any[]) => {\n    if (globalSettings.physics?.arcade?.debug) {\n        console.info(...args);\n    }\n}\n\nexport const wait = async (ms: number) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\nexport interface WandingConfig {\n    maxSpeed: number;\n    minSpeed: number;\n    startPositionX: number;\n    startPositionY: number;\n    image: string;\n    frame: number;\n}\n\nexport const createWandingObject = (scene: Phaser.Scene, config: WandingConfig) => {\n    const wandingObject = scene.physics.add.sprite(\n        config.startPositionX,\n        config.startPositionY,\n        config.image,\n        config.frame,\n    );\n    wandingObject\n        .setScale(2)\n        .setBounceX(1)\n        .setBounceY(1)\n        .setCollideWorldBounds(true)\n        .setVelocity(\n            randomInteger(config.minSpeed, config.maxSpeed),\n            randomInteger(config.minSpeed, config.maxSpeed),\n        );\n\n    return wandingObject;\n}\n\nexport const createBackground = (scene: Phaser.Scene) => {\n    const globalWidth = Number(globalSettings.width);\n    const globalHeight = Number(globalSettings.height);\n    const background = scene.add.image(globalWidth / 2, globalHeight / 2, ASSETS_MAP_KEY.background)\n        .setOrigin(.5, .5);\n    // Based on your game size, it may \"stretch\" and distort.\n    background.displayWidth = globalWidth;\n    background.displayHeight = globalHeight;\n}\n\nexport const infinityRotate = (object: Phaser.Physics.Arcade.Sprite, speed: number) => {\n    if (object.angle === 359) {\n        object.angle = 0;\n    } else {\n        object.setAngle(object.angle + speed);\n    }\n}\n\nexport const min = 1000 * 60;\nexport const hour = min * 60;\n","export const menuSettings = {\n    player:{\n        startPositionX: 20,\n        startPositionY: 20,\n        minSpeed: 25,\n        maxSpeed: 50,\n    },\n    ui: {\n        title: {\n            fontSize: 100,\n            fontColor: '#fff',\n            text: 'Добро пожаловать в \\n хомячий бедтрип',\n        },\n        description: {\n            fontSize: 25,\n            fontColor: '#fff',\n            text: '( нажмите в любое место )',\n        }\n    },\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { SCENE_KEYS } from '../../constants';\nimport { globalSettings, uiSettings } from '../../settings';\nimport { createBackground, createWandingObject, infinityRotate, logger } from '../../utils';\nimport { menuSettings } from './settings';\n\nexport class MenuScene extends Phaser.Scene {\n    private backgroundPlayer!: Phaser.Physics.Arcade.Sprite;\n\n    constructor() {\n        super(SCENE_KEYS.MENU);\n    }\n\n    create() {\n        createBackground(this);\n\n        this.backgroundPlayer = createWandingObject(this, {\n            ...menuSettings.player,\n            image: ASSETS_MAP_KEY.player,\n            frame: 0,\n        });\n\n        const gameWidth = (Number(globalSettings.width) || 0);\n        this.add.text(gameWidth / 2, 230, menuSettings.ui.title.text, {\n            fontFamily: uiSettings.font,\n            color: menuSettings.ui.title.fontColor,\n            align: 'center',\n        }).setOrigin(0.5, 0).setFontSize(menuSettings.ui.title.fontSize);\n\n        this.add.text(gameWidth / 2, 470, menuSettings.ui.description.text, {\n            fontFamily: uiSettings.font,\n            color: menuSettings.ui.description.fontColor,\n        }).setOrigin(0.5, 0).setFontSize(menuSettings.ui.description.fontSize)\n\n        this.input.once('pointerdown', () => {\n            this.scene.start(SCENE_KEYS.GAME);\n        });\n\n        logger('preload', SCENE_KEYS.MENU, 'scene');\n    }\n\n    update() {\n        infinityRotate(this.backgroundPlayer, 1);\n    }\n}\n","import Phaser from \"phaser\";\nimport { Effect } from '../Effect/Effect';\n\nexport interface GameObjectConfig {\n    x: number;\n    y: number;\n    speed: number;\n}\n\nexport class GameObject extends Phaser.Physics.Arcade.Sprite {\n    speed: number;\n\n    protected effects: Effect[] = [];\n\n    constructor (scene: Phaser.Scene, config: GameObjectConfig) {\n        super(scene, config.x, config.y, '');\n        this.speed = config.speed;\n\n        this.init();\n    }\n\n    setSpeed(speed: number) {\n        this.speed = speed;\n    }\n\n    addEffect(effect: Effect) {\n        this.effects.push(effect);\n        effect.start(this, this.scene.time.now);\n    }\n\n    removeEffect(effect: Effect) {\n        effect.isEnded = true;\n    }\n\n    stop() {\n        super.stop();\n        this.active = false;\n\n        return this;\n    }\n\n    protected init() {\n        this.scene.add.existing(this);\n        this.scene.physics.add.existing(this);\n    }\n\n    protected createAnimations() {}\n\n    protected checkEffects() {\n        this.effects = this.effects.filter((effect) => {\n            if (effect.isEnded) {\n                effect.end(this.scene.time.now);\n            }\n            return !effect.isEnded;\n        });\n    }\n\n    protected updateEffects() {\n        this.effects.forEach((effect) => {\n            effect.update(this.scene.time.now);\n        })\n    }\n}\n","export const playerSettings = {\n    // Коээфициент насыщенности, который высчитывает новые размеры по форумел scale = saturation / saturationQ.\n    scaleQ: 100,\n    // Коээфициент сытости, которые высчитывает новое значение по формуле satiety = saturation / satietyQ.\n    satietyQ: 100,\n    // Начальные координаты игрока по оси х.\n    startX: 300,\n    // Начальные координаты игрока по оси y.\n    startY: 300,\n    // Начальная скорость игрока.\n    startSpeed: 150,\n    // Начальное здоровье игрока.\n    startHealth: 25,\n    // Начальное значение насыщенности.\n    startSatiety: 1,\n    // Минимальное значение satiety, после которого игрок умирает.\n    minSatiety: .5,\n    // Минимальное значение здоровья, после которого игрок умирает.\n    minHealth: 0,\n};\n","import { Player } from '../Player/Player';\nimport { Enemy } from '../Enemy/Enemy';\nimport { GameObject } from '../GameObject/GameObject';\n\nexport type EffectTarget = Player | Enemy | GameObject;\n\nexport class Effect {\n    isEnded: boolean = false;\n\n    protected target!: EffectTarget;\n    protected startTime!: number;\n    protected duration: number = 0;\n\n    start(target: EffectTarget, now: number) {\n        this.target = target;\n        this.startTime = now;\n    }\n\n    update(now: number) {\n        if (this.isEnded) {\n            return;\n        }\n\n        if (now > this.startTime + this.duration) {\n            this.isEnded = true;\n        }\n    }\n\n    end(now: number) {}\n}\n","import { Player } from '../Player/Player';\nimport { Effect, EffectTarget } from './Effect';\n\nexport class Hungry extends Effect {\n    lasEatTime: number = 0;\n\n    private hungryDelay = 5000;\n    private hungryDamage = 10;\n    protected duration: number = Infinity;\n\n    start(target: EffectTarget, now: number) {\n        super.start(target, now);\n\n        this.lasEatTime = now;\n    }\n\n    update(now: number) {\n        if (now > this.lasEatTime + this.hungryDelay) {\n            if (this.target instanceof Player) {\n                this.target.updateSetiety(-this.hungryDamage);\n                this.lasEatTime = now;\n            }\n        }\n    }\n}\n","import { Player } from '../Player/Player';\nimport { Effect, EffectTarget } from './Effect';\n\nexport class Saturation extends Effect {\n    private saturation: number;\n    protected duration: number = 0;\n\n    constructor(damage: number) {\n        super();\n\n        this.saturation = damage;\n    }\n\n    start(target: EffectTarget ,now: number) {\n        super.start(target, now);\n        if (this.target instanceof Player) {\n            this.target.updateSetiety(this.saturation);\n        }\n    }\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { ANIMATION_KEYS } from '../../constants';\nimport { enemySettings } from './settings';\nimport { globalSettings } from '../../settings';\nimport { randomInteger } from '../../utils';\nimport { GameObject, GameObjectConfig } from \"../GameObject/GameObject\";\nimport { Damage } from '../Effect/Damage';\n\nexport interface EnemyConfig extends Pick<GameObjectConfig, 'speed'> {};\n\nenum VelocityVector {\n    TOP_TO_BOTTOM,\n    LEFT_TO_RIGHT,\n    BOTTOM_TO_TOP,\n    RIGHT_TO_LEFT,\n}\n\nexport class Enemy extends GameObject {\n    private damage: number = 0;\n    private velocityVector: VelocityVector = 0;\n\n    constructor (scene: Phaser.Scene, config: EnemyConfig) {\n        super(scene, {\n            ...config,\n            x: -500,\n            y: -500,\n        });\n\n        this.setScale(2);\n        this.play(ANIMATION_KEYS.IDLE);\n    }\n\n    setSpeed(speed: number) {\n        super.setSpeed(speed);\n\n        switch(this.velocityVector) {\n            case VelocityVector.TOP_TO_BOTTOM: {\n                this.setVelocityY(this.speed);\n                break;\n            }\n            case VelocityVector.RIGHT_TO_LEFT: {\n                this.setVelocityX(-this.speed);\n                break;\n            }\n            case VelocityVector.BOTTOM_TO_TOP: {\n                this.setVelocityY(-this.speed);\n                break;\n            }\n            case VelocityVector.LEFT_TO_RIGHT: {\n                this.setVelocityX(this.speed);\n                break;\n            }\n        }\n    }\n\n    getDamageEffect(): Damage {\n        return new Damage(this.damage);\n    }\n\n    update() {\n        const gameWidth = Number(globalSettings.width);\n        const gameHeight = Number(globalSettings.height);\n\n        if (this.x > gameWidth + enemySettings.resetPositionOffset) {\n            this.reset();\n        } else if (this.x < (0 - (gameWidth + enemySettings.resetPositionOffset))) {\n            this.reset();\n        } else if (this.y < (0 - (gameHeight + enemySettings.resetPositionOffset))) {\n            this.reset();\n        } else if (this.y > gameHeight + enemySettings.resetPositionOffset) {\n            this.reset();\n        }\n    }\n\n    reset() {\n        const coords = this.getStartEnemyCoords();\n        this.setX(coords.x);\n        this.setY(coords.y);\n        this.damage = this.getRandomDamage();\n        this.initMovement();\n    }\n\n    protected init() {\n        super.init();\n\n        this.createAnimations();\n    }\n\n    private initMovement() {\n        const isHorizontalVector = this.x < 0 || this.x > Number(globalSettings.width);\n        this.setVelocity(0);\n\n        if(isHorizontalVector) {\n            if (this.x < 0) {\n                this.velocityVector = VelocityVector.LEFT_TO_RIGHT;\n            } else {\n                this.velocityVector = VelocityVector.RIGHT_TO_LEFT;\n            }\n        } else {\n            if (this.y < 0) {\n                this.velocityVector = VelocityVector.TOP_TO_BOTTOM;\n            } else {\n                this.velocityVector = VelocityVector.BOTTOM_TO_TOP;\n            }\n        };\n\n        this.setSpeed(enemySettings.speed);\n    }\n\n    private getStartEnemyCoords(): Phaser.Math.Vector2 {\n        const isHorizontal = Math.random() >= .5;\n        const isLeft = Math.random() >= .5;\n        const isTop = Math.random() >= .5;\n        const gameWidth = Number(globalSettings.width);\n        const gameHeight = Number(globalSettings.height);\n\n        if (isHorizontal) {\n            if (isLeft) {\n                return new Phaser.Math.Vector2({\n                    x: -enemySettings.startPositionOffset,\n                    y: randomInteger(0, gameHeight)\n                });\n            } else {\n                return new Phaser.Math.Vector2({\n                    x: gameWidth + enemySettings.startPositionOffset,\n                    y: randomInteger(0, gameHeight)\n                });\n            }\n        } else {\n            if (isTop) {\n                return new Phaser.Math.Vector2({\n                    x: randomInteger(0, gameWidth),\n                    y: -enemySettings.startPositionOffset\n                });\n            } else {\n                return new Phaser.Math.Vector2({\n                    x: randomInteger(0, gameWidth),\n                    y: gameHeight + enemySettings.startPositionOffset\n                });\n            }\n        }\n    }\n\n    private getRandomDamage() {\n        return randomInteger(enemySettings.minDamage, enemySettings.maxDamage);\n    }\n\n    protected createAnimations() {\n        this.anims.create({\n            key: ANIMATION_KEYS.IDLE,\n            frames: this.anims.generateFrameNumbers(ASSETS_MAP_KEY.enemy, { frames: [3] }),\n            frameRate: 19,\n            repeat: -1,\n        });\n    }\n}\n","export const scoreBoardSettings = {\n    offsetX: 10,\n    offsetY: -10,\n    ui: {\n        timeText: 'Время: ',\n        healthText: 'Здоровье: ',\n        satietyText: 'Сытость: '\n    }\n}\n","import Phaser from 'phaser';\nimport { scoreBoardSettings } from './settings';\nimport { uiSettings } from '../../settings';\nimport { Player } from '../Player/Player';\n\nexport class ScoreBoard extends Phaser.GameObjects.Layer {\n    board: Phaser.GameObjects.Text;\n    startTime: number = 0;\n\n    constructor(scene: Phaser.Scene) {\n        super(scene);\n        this.scene.add.existing(this);\n\n        this.board = this.add(scene.make.text({\n            text: this.getInfoText(0, 0, 0),\n            style: {\n                fontFamily: uiSettings.font,\n            }\n        })) as Phaser.GameObjects.Text;\n        this.board.setOrigin(0, 0)\n            .setX(scoreBoardSettings.offsetX)\n            .setY(scoreBoardSettings.offsetY);\n\n        this.startTime = this.scene.time.now;\n    }\n\n    update(player: Player) {\n        let time = this.scene.time.now - this.startTime;\n        this.board.setText(this.getInfoText(time, player.getHealth(), player.getSatiety()));\n    }\n\n    private getInfoText(time: number, health: number, satiety: number) {\n        return `\n${scoreBoardSettings.ui.timeText}${this.getTimeText(time)}\n${scoreBoardSettings.ui.healthText}${health}\n${scoreBoardSettings.ui.satietyText}${satiety.toFixed(2)}\n        `;\n    }\n\n    private getTimeText(ms: number) {\n        let seconds = Math.floor(ms / 1000);\n        if (seconds < 60) {\n            return `${seconds} сек.`;\n        } else if (seconds < 3600) {\n            return `${Math.floor(seconds / 60)} мин. ${seconds % 60} сек.`;\n        }\n        let hours = Math.floor(seconds / 3600);\n        let substractedSeconds = seconds % 3600;\n        return `${hours} час. ${Math.floor(substractedSeconds / 60)} мин. ${substractedSeconds % 60} сек.`;\n    }\n}\n","export const enemySettings = {\n    // Началная позиция по одной из оси.\n    startPositionOffset: 20,\n    // Конечная позиция после которой враг будет пересоздан.\n    resetPositionOffset: 100,\n    // Скорость передвижения.\n    speed: 200,\n    // Минимальный урон врага.\n    minDamage: 10,\n    // Максимальный урон врага.\n    maxDamage: 25,\n    // Ширина спрайта\n    width: 48,\n    // Высота спрайта\n    height: 48,\n};\n\nexport const enemyGroupSettings = {\n    // Кол-во врагов на сцене\n    maxEnemiesOnScene: 3,\n    // Задержа перед началом создания врагов в начале игры.\n    createDelay: 1500,\n}\n","import { Player } from '../Player/Player';\nimport { Effect, EffectTarget } from './Effect';\n\nexport class Damage extends Effect {\n    private damage: number;\n\n    constructor(damage: number) {\n        super();\n\n        this.damage = damage;\n    }\n\n    start(target: EffectTarget ,now: number) {\n        super.start(target, now);\n\n        if (!(this.target instanceof Player)) {\n            return;\n        }\n\n        const player = this.target as Player;\n        player.updateSetiety(-this.damage);\n    }\n}\n","import Phaser from 'phaser';\nimport { Enemy } from './Enemy';\nimport { enemyGroupSettings } from './settings';\nimport { wait } from '../../utils';\n\nexport class EnemyGroup extends Phaser.Physics.Arcade.Group {\n    private enemies: Enemy[] = [];\n\n    constructor(world: Phaser.Physics.Arcade.World, scene: Phaser.Scene) {\n        super(world, scene);\n\n        this.classType = Enemy;\n        this.init();\n    }\n\n    protected async init() {\n        for(let i = 0; i < enemyGroupSettings.maxEnemiesOnScene; i ++) {\n            await wait(enemyGroupSettings.createDelay);\n            if (!this.active) {\n                return;\n            }\n            const enemy = new Enemy(this.scene, { speed: 0 });\n            this.enemies.push(enemy);\n            this.add(enemy);\n            // TODO: почему то добавление врага в группу убирает скорость. Подумать, в чем причина.\n            enemy.reset();\n        }\n    }\n\n    update() {\n        this.enemies.forEach((enemy) => enemy.update());\n    }\n\n    stop() {\n        this.enemies.forEach((enemy) => enemy.stop());\n        this.active = false;\n    }\n}\n","export const foodSettings = {\n    // Максимальная насыщенность еды.\n    minSaturation: 10,\n    // Минимальная насыщенность еды.\n    maxSaturation: 25,\n    // Оступ от границ для расчета начальных координат.\n    startPositionOffset: 20,\n};\n\nexport const foodGroupSettings = {\n    // Максимальное кол-во еды на сцене.\n    maxFoodOnScene: 4,\n    // Задержка при создании еды в начале игры.\n    createDelay: 2500,\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { foodSettings } from './settings';\nimport { globalSettings } from '../../settings';\nimport { randomInteger } from '../../utils';\nimport { GameObject, GameObjectConfig } from \"../GameObject/GameObject\";\nimport { Saturation } from '../Effect/Saturation';\n\nexport interface FoodConfig extends Pick<GameObjectConfig, 'speed'> {}\n\nconst SPRITESHEET_FRAMES_COUNT = 23;\n\nexport class Food extends GameObject {\n    private saturation: number = 0;\n    private outer: Phaser.Geom.Rectangle = new Phaser.Geom.Rectangle(\n        0 + foodSettings.startPositionOffset,\n        0 + foodSettings.startPositionOffset,\n        Number(globalSettings.width) - foodSettings.startPositionOffset,\n        Number(globalSettings.height) - foodSettings.startPositionOffset,\n    );\n    private target: Phaser.Geom.Point = new Phaser.Geom.Point();\n\n    constructor (scene: Phaser.Scene, config: FoodConfig) {\n        super(scene, {\n            ...config,\n            x: 0,\n            y: 0,\n        });\n\n        this.reset();\n    }\n\n    getSaturationEffect(): Saturation {\n        return new Saturation(this.saturation);\n    }\n\n    reset() {\n        this.saturation = this.getRandomSaturation();\n        this.outer.getRandomPoint(this.target);\n        this.body.reset(this.target.x, this.target.y);\n        this.setTexture(ASSETS_MAP_KEY.food, randomInteger(0, SPRITESHEET_FRAMES_COUNT));\n    }\n\n    protected init() {\n        super.init();\n    }\n\n    private getRandomSaturation() {\n        return randomInteger(foodSettings.minSaturation, foodSettings.maxSaturation);\n    }\n}\n","import Phaser from 'phaser';\nimport { foodGroupSettings } from './settings';\nimport { wait } from '../../utils';\nimport { Food } from './Food';\n\nexport class FoodGroup extends Phaser.Physics.Arcade.Group {\n    private foods: Food[] = [];\n\n    constructor(world: Phaser.Physics.Arcade.World, scene: Phaser.Scene) {\n        super(world, scene);\n\n        this.classType = Food;\n        this.init();\n    }\n\n    protected async init() {\n        for(let i = 0; i < foodGroupSettings.maxFoodOnScene; i ++) {\n            await wait(foodGroupSettings.createDelay);\n            if (!this.active) {\n                return;\n            }\n            const food = new Food(this.scene, { speed: 0 });\n            this.foods.push(food);\n            this.add(food);\n            this.createAnimations(food);\n            // TODO: почему то добавление врага в группу убирает скорость. Подумать, в чем причина.\n            food.reset();\n        }\n    }\n\n    protected createAnimations(food: Food) {\n        this.scene.tweens.add({\n            targets: food,\n            scale: 1.1,\n            props: {\n                scale: { value: 1.5, duration: 1000 },\n            },\n            repeat: -1,\n            yoyo: true,\n        });\n    }\n\n    stop() {\n        this.foods.forEach((food) => food.stop());\n        this.active = false;\n    }\n}\n","import { Effect, EffectTarget } from './Effect';\n\nexport class Speed extends Effect {\n    private speed: number = 100;\n\n    constructor (speed?: number) {\n        super();\n        this.speed = speed || this.speed;\n    }\n\n    start(target: EffectTarget ,now: number) {\n        super.start(target, now);\n        this.target.setSpeed(this.target.speed + this.speed);\n    }\n}\n","import { min } from '../../utils';\n\nexport { min, hour } from '../../utils';\n\nexport const gameSettings = {\n    minWinTimeMs: min,\n    maxWinTimeMs: min * 1.5,\n}\n","import { SCENE_KEYS } from '../../constants';\nimport { Food } from '../../gameobjects/Food/Food';\nimport { Player, PlayerEvents } from '../../gameobjects/Player/Player';\nimport { createBackground, logger, randomInteger } from '../../utils';\nimport { ScoreBoard } from '../../gameobjects/ScoreBoard/ScoreBoard';\nimport { Enemy } from '../../gameobjects/Enemy/Enemy';\nimport { EnemyGroup } from '../../gameobjects/Enemy/EnemyGroup';\nimport { FoodGroup } from '../../gameobjects/Food/FoodGroup';\nimport { Speed } from '../../gameobjects/Effect/Speed';\nimport { gameSettings } from './settings';\n\nexport class GameScene extends Phaser.Scene {\n    private cursors!: Phaser.Types.Input.Keyboard.CursorKeys;\n    private player!: Player;\n    private foodGroup!: FoodGroup;\n    private enemyGroup!: EnemyGroup;\n    private scoreBoard!: ScoreBoard;\n    private winTime: number = randomInteger(gameSettings.minWinTimeMs, gameSettings.maxWinTimeMs);\n    private startTime!: number;\n\n    constructor() {\n        super(SCENE_KEYS.GAME);\n    }\n\n    preload() {\n        logger('preload', SCENE_KEYS.GAME, 'scene');\n    }\n\n    create() {\n        this.cursors = this.input.keyboard.createCursorKeys();\n        createBackground(this);\n\n        this.createPlayer();\n        this.createFoods();\n        this.createEnemies();\n        this.createScoreBoard();\n\n        this.physics.add.overlap(this.player, this.foodGroup, (obj1, obj2) => {\n            const player = obj1 as Player;\n            const food = obj2 as Food;\n            const saturationEffect = food.getSaturationEffect();\n\n            player.addEffect(saturationEffect);\n            food.reset();\n        });\n        this.physics.add.overlap(this.player, this.enemyGroup, (obj1, obj2) => {\n            const player = obj1 as Player;\n            const enemy = obj2 as Enemy;\n            const damageEffect = enemy.getDamageEffect();\n            player.addEffect(damageEffect);\n            enemy.reset();\n        });\n        this.physics.add.overlap(this.foodGroup, this.enemyGroup, (obj1, obj2) => {\n            const food = obj1 as Food;\n            const enemy = obj2 as Enemy;\n            const speedEffect = new Speed();\n            enemy.addEffect(speedEffect);\n            food.reset();\n        });\n\n        this.startTime = this.time.now;\n    }\n\n    update() {\n        this.checkGameTime();\n        this.player.update(this.cursors);\n        this.enemyGroup.update();\n        this.scoreBoard.update(this.player);\n    }\n\n    private createPlayer() {\n        this.player = new Player(this);\n        this.player.on(PlayerEvents.DIE, () => {\n            this.player.stop();\n            this.foodGroup.stop();\n            this.enemyGroup.stop();\n            this.scene.start(SCENE_KEYS.END);\n        });\n    }\n\n    private createFoods() {\n        this.foodGroup = new FoodGroup(this.physics.world, this);\n    }\n\n    private createEnemies() {\n        this.enemyGroup = new EnemyGroup(this.physics.world, this);\n    }\n\n    private createScoreBoard() {\n        this.scoreBoard = new ScoreBoard(this);\n    }\n\n    private checkGameTime() {\n        if (this.startTime + this.winTime < this.time.now) {\n            this.scene.start(SCENE_KEYS.WIN);\n        }\n    }\n}\n","export const endSettings =  {\n    ui: {\n        title: {\n            fontSize: 100,\n            fontColor: '#fff',\n            text: 'Вас отпустило',\n        },\n        description: {\n            fontSize: 25,\n            fontColor: '#fff',\n            text: '( нажмите в любое место, что бы начать заново )',\n        }\n    },\n    player:{\n        startPositionX: 20,\n        startPositionY: 20,\n        minSpeed: 25,\n        maxSpeed: 50,\n    },\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { SCENE_KEYS } from '../../constants';\nimport { globalSettings, uiSettings } from '../../settings';\nimport { createBackground, createWandingObject, infinityRotate, logger, randomInteger } from '../../utils';\nimport { endSettings } from './settings';\n\nexport class EndScene extends Phaser.Scene {\n    private backgroundPlayer!: Phaser.Physics.Arcade.Sprite;\n\n    constructor() {\n        super(SCENE_KEYS.END);\n    }\n\n    preload() {\n        logger('preload', SCENE_KEYS.END, 'scene');\n    }\n\n    update() {\n        infinityRotate(this.backgroundPlayer, 1);\n    }\n\n    create() {\n        createBackground(this);\n        this.backgroundPlayer = createWandingObject(this, {\n            ...endSettings.player,\n            image: ASSETS_MAP_KEY.food,\n            frame: randomInteger(0, 23),\n        });\n\n        const gameWidth = (Number(globalSettings.width) || 0);\n        this.add.text(gameWidth / 2, 350, endSettings.ui.title.text, {\n            fontFamily: uiSettings.font,\n            color: endSettings.ui.title.fontColor,\n        }).setOrigin(0.5, 0).setFontSize(endSettings.ui.title.fontSize);\n\n        this.add.text(gameWidth / 2, 470, endSettings.ui.description.text, {\n            fontFamily: uiSettings.font,\n            color: endSettings.ui.description.fontColor,\n        }).setOrigin(0.5, 0).setFontSize(endSettings.ui.description.fontSize)\n\n        this.input.once('pointerdown', () => {\n            this.scene.start(SCENE_KEYS.MENU);\n        });\n    }\n}","import Phaser from 'phaser';\nimport { SCENE_KEYS } from '../../constants';\nimport { logger } from '../../utils';\n\nexport class BootScene extends Phaser.Scene {\n    constructor() {\n        super(SCENE_KEYS.BOOT);\n    }\n\n    preload() {\n        this.load.script('webfont', 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js');\n\n        logger('preload', SCENE_KEYS.BOOT, 'scene');\n    }\n\n    create() {\n        this.scene.start(SCENE_KEYS.PRELOAD);\n    }\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP, ASSETS_MAP_KEY } from '../../assets';\nimport { SCENE_KEYS } from '../../constants';\nimport { globalSettings, uiSettings } from '../../settings';\nimport { logger } from '../../utils';\n\nexport class PreloadScene extends Phaser.Scene {\n    constructor() {\n        super(SCENE_KEYS.PRELOAD);\n    }\n\n    preload() {\n        // NOTE: все спрайты должны загружаться с одинаковым размером фрейма.\n        this.load.spritesheet(ASSETS_MAP_KEY.player, ASSETS_MAP.player, { frameWidth: 32, frameHeight: 32 });\n        this.load.spritesheet(ASSETS_MAP_KEY.enemy, ASSETS_MAP.enemy, { frameWidth: 32, frameHeight: 32 });\n        this.load.spritesheet(ASSETS_MAP_KEY.food, ASSETS_MAP.food, { frameWidth: 32, frameHeight: 32 });\n        this.load.image(ASSETS_MAP_KEY.background, ASSETS_MAP.background);\n\n        logger('preload', SCENE_KEYS.PRELOAD, 'scene');\n    }\n\n    create() {\n        // @ts-ignore-next-line\n        window.WebFont.load({\n            google: {\n                families: [ uiSettings.font ],\n            },\n            active: () => {\n                if (Number(globalSettings.width) < 1000 || Number(globalSettings.height) < 500) {\n                    this.scene.start(SCENE_KEYS.MOBILE_ERROR);\n                } else {\n                    this.scene.start(SCENE_KEYS.MENU);\n                }\n            },\n        });\n    }\n}\n","export const mobileErrorSettings = {\n    player:{\n        startPositionX: 20,\n        startPositionY: 20,\n        minSpeed: 25,\n        maxSpeed: 50,\n    },\n    ui: {\n        title: {\n            fontSize: 35,\n            fontColor: '#fff',\n            text: 'Игра только для\\n пк-бояр',\n        }\n    },\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { SCENE_KEYS } from '../../constants';\nimport { globalSettings, uiSettings } from '../../settings';\nimport { createBackground, createWandingObject, infinityRotate, logger } from '../../utils';\nimport { mobileErrorSettings } from './settings';\n\nexport class MobileError extends Phaser.Scene {\n    private backgroundPlayer!: Phaser.Physics.Arcade.Sprite;\n\n    constructor() {\n        super(SCENE_KEYS.MOBILE_ERROR);\n    }\n\n    create() {\n        createBackground(this);\n\n        this.backgroundPlayer = createWandingObject(this, {\n            ...mobileErrorSettings.player,\n            image: ASSETS_MAP_KEY.player,\n            frame: 0,\n        });\n\n        const gameWidth = (Number(globalSettings.width) || 0);\n        const gameHeight = (Number(globalSettings.height) || 0);\n        this.add.text(0, 0, mobileErrorSettings.ui.title.text, {\n            fontFamily: uiSettings.font,\n            color: mobileErrorSettings.ui.title.fontColor,\n            align: 'center',\n        }).setOrigin(0.5, 0.5)\n            .setX(gameWidth / 2)\n            .setY(gameHeight / 2)\n            .setFontSize(mobileErrorSettings.ui.title.fontSize);\n\n        logger('preload', SCENE_KEYS.MOBILE_ERROR, 'scene');\n    }\n\n    update() {\n        infinityRotate(this.backgroundPlayer, 1);\n    }\n}\n","export const winSettings =  {\n    player:{\n        startPositionX: 20,\n        startPositionY: 20,\n        minSpeed: 25,\n        maxSpeed: 50,\n    },\n    ui: {\n        title: {\n            fontSize: 100,\n            fontColor: '#fff',\n            text: 'Ого, ты выиграл!',\n        },\n        description: {\n            fontSize: 25,\n            fontColor: '#fff',\n            text: '( нажмите в любое место, что бы начать заново ( можно не надо... ) )',\n        }\n    }\n}\n","import Phaser from 'phaser';\nimport { ASSETS_MAP_KEY } from '../../assets';\nimport { SCENE_KEYS } from '../../constants';\nimport { globalSettings, uiSettings } from '../../settings';\nimport { logger, randomInteger } from '../../utils';\nimport { winSettings } from './settings';\n\nexport class WinScene extends Phaser.Scene {\n    private backgroundPlayer!: Phaser.Physics.Arcade.Sprite;\n\n    constructor() {\n        super(SCENE_KEYS.WIN);\n\n    }\n\n    preload() {\n        logger('preload', SCENE_KEYS.WIN, 'scene');\n    }\n\n    create() {\n        // TODO: вынести в отдельную функцию/метод, что бы использовать везде.\n        const globalWidth = Number(globalSettings.width);\n        const globalHeight = Number(globalSettings.height);\n        const background = this.add.image(globalWidth / 2, globalHeight / 2, ASSETS_MAP_KEY.background)\n            .setOrigin(.5, .5);\n        // Based on your game size, it may \"stretch\" and distort.\n        background.displayWidth = Number(globalSettings.width);\n        background.displayHeight = Number(globalSettings.height);\n\n        this.createBackgroundPlayerAnimation();\n\n        const gameWidth = (Number(globalSettings.width) || 0);\n        this.add.text(gameWidth / 2, 350, winSettings.ui.title.text, {\n            fontFamily: uiSettings.font,\n            color: winSettings.ui.title.fontColor,\n        }).setOrigin(0.5, 0).setFontSize(winSettings.ui.title.fontSize);\n\n        this.add.text(gameWidth / 2, 470, winSettings.ui.description.text, {\n            fontFamily: uiSettings.font,\n            color: winSettings.ui.description.fontColor,\n        }).setOrigin(0.5, 0).setFontSize(winSettings.ui.description.fontSize)\n\n        this.input.once('pointerdown', () => {\n            this.scene.start(SCENE_KEYS.MENU);\n        });\n    }\n\n    update() {\n        if (this.backgroundPlayer.angle === 359) {\n            this.backgroundPlayer.angle = 0;\n        } else {\n            this.backgroundPlayer.setAngle(this.backgroundPlayer.angle + 1);\n        }\n    }\n\n    private createBackgroundPlayerAnimation() {\n        this.backgroundPlayer = this.physics.add.sprite(\n            winSettings.player.startPositionX,\n            winSettings.player.startPositionY,\n            ASSETS_MAP_KEY.player, 0\n        );\n        this.backgroundPlayer\n            .setScale(2)\n            .setBounceX(1)\n            .setBounceY(1)\n            .setCollideWorldBounds(true)\n            .setVelocity(\n                randomInteger(winSettings.player.minSpeed, winSettings.player.maxSpeed),\n                randomInteger(winSettings.player.minSpeed, winSettings.player.maxSpeed),\n            );\n    }\n}\n\n","import Phaser from 'phaser';\nimport { MenuScene } from './scene/Menu/menu';\nimport { GameScene} from './scene/Game/game';\nimport { EndScene } from './scene/End/end';\nimport { BootScene } from './scene/Boot/boot';\nimport { PreloadScene } from './scene/Preload/preload';\nimport { MobileError } from './scene/MobileError/mobileError';\nimport { globalSettings } from './settings';\nimport { WinScene } from './scene/Win/win';\n\nconst config: Phaser.Types.Core.GameConfig = {\n    ...globalSettings,\n    scene: [BootScene, PreloadScene, MenuScene, GameScene, WinScene, EndScene, MobileError],\n};\n\nnew Phaser.Game(config);\n"],"sourceRoot":""}